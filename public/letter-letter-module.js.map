{"version":3,"sources":["webpack:///./src/app/main/content/apps/letter/letter.component.html","webpack:///./src/app/main/content/apps/letter/letter.component.scss","webpack:///./src/app/main/content/apps/letter/letter.component.ts","webpack:///./src/app/main/content/apps/letter/letter.module.ts"],"names":[],"mappings":"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","file":"letter-letter-module.js","sourcesContent":["module.exports = \"<mat-tree [dataSource]=\\\"nestedDataSource\\\" [treeControl]=\\\"nestedTreeControl\\\" class=\\\"example-tree\\\">\\r\\n        <mat-tree-node *matTreeNodeDef=\\\"let node\\\" matTreeNodeToggle>\\r\\n          <li class=\\\"mat-tree-node\\\">\\r\\n            <button mat-icon-button disabled></button>\\r\\n            {{node.filename}}:  {{node.type}}\\r\\n          </li>\\r\\n        </mat-tree-node>\\r\\n      \\r\\n        <mat-nested-tree-node *matTreeNodeDef=\\\"let node; when: hasNestedChild\\\">\\r\\n          <li>\\r\\n            <div class=\\\"mat-tree-node\\\">\\r\\n              <button mat-icon-button matTreeNodeToggle\\r\\n                      [attr.aria-label]=\\\"'toggle ' + node.filename\\\">\\r\\n                <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\r\\n                  {{nestedTreeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\\r\\n                </mat-icon>\\r\\n              </button>\\r\\n              {{node.filename}}\\r\\n            </div>\\r\\n            <ul [class.example-tree-invisible]=\\\"!nestedTreeControl.isExpanded(node)\\\">\\r\\n              <ng-container matTreeNodeOutlet></ng-container>\\r\\n            </ul>\\r\\n          </li>\\r\\n        </mat-nested-tree-node>\\r\\n      </mat-tree>\\r\\n       \\r\\n      \\r\\n      <!-- Copyright 2018 Google Inc. All Rights Reserved.\\r\\n          Use of this source code is governed by an MIT-style license that\\r\\n          can be found in the LICENSE file at http://angular.io/license -->\"","module.exports = \".example-tree-invisible {\\n  display: none; }\\n\\n.example-tree ul,\\n.example-tree li {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  list-style-type: none; }\\n\"","\nimport { Component, OnInit,Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport {NestedTreeControl} from '@angular/cdk/tree';\n\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\nimport {BehaviorSubject, of as observableOf} from 'rxjs';\n\n/**\n * Json node data with nested structure. Each node has a filename and a value or a list of children\n */\nexport class FileNode {\n  children: FileNode[];\n  filename: string;\n  type: any;\n}\n/**\n * The Json tree data in string. The data could be parsed into Json object\n */\nconst TREE_DATA = \n  `{\n    \"Site 1\": {\n      \"Hazard 1\": {\n        \"Tests\": {\n          \"Test 1\": \"Test\",\n          \"Test 2\": \"Test\"\n        }\n      },\n      \"Hazard 2\": {\n        \"Tests\": {\n          \"Test 1\": \"Test\",\n          \"Test 2\": \"Test\"\n        }\n      }\n    },\n    \"Site 2\": {\n      \"Hazard 1\": {\n        \"Tests\": {\n          \"Test 1\": \"Test\",\n          \"Test 2\": \"Test\"\n        }\n      }\n    }\n   \n  }`;\n\n/**\n * File database, it can build a tree structured Json object from string.\n * Each node in Json object represents a file or a directory. For a file, it has filename and type.\n * For a directory, it has filename and children (a list of files or directories).\n * The input will be a json object string, and the output is a list of `FileNode` with nested\n * structure.\n */\n@Injectable()\nexport class FileDatabase {\n  dataChange: BehaviorSubject<FileNode[]> = new BehaviorSubject<FileNode[]>([]);\n\n  get data(): FileNode[] { return this.dataChange.value; }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize() {\n    // Parse the string to json object.\n    const dataObject = JSON.parse(TREE_DATA);\n\n    // Build the tree nodes from Json object. The result is a list of `FileNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(dataObject, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `FileNode`.\n   */\n  buildFileTree(value: any, level: number): FileNode[] {\n    let data: any[] = [];\n    for (let k in value) {\n      let v = value[k];\n      let node = new FileNode();\n      node.filename = `${k}`;\n      if (v === null || v === undefined) {\n        // no action\n      } else if (typeof v === 'object') {\n        node.children = this.buildFileTree(v, level + 1);\n      } else {\n        node.type = v;\n      }\n      data.push(node);\n    }\n    return data;\n  }\n}\n\n@Component({\n  selector: 'app-letter',\n  templateUrl: './letter.component.html',\n  styleUrls: ['./letter.component.scss'],\n  providers: [FileDatabase]\n})\nexport class LetterComponent  {\n  sites:any;\n  tests:any;\n\n  ngOnInit() {\n  }\n  nestedTreeControl: NestedTreeControl<FileNode>;\n\n  nestedDataSource: MatTreeNestedDataSource<FileNode>;\n\n  constructor(database: FileDatabase) {\n    this.nestedTreeControl = new NestedTreeControl<FileNode>(this._getChildren);\n    this.nestedDataSource = new MatTreeNestedDataSource();\n\n    database.dataChange.subscribe(data => this.nestedDataSource.data = data);\n  }\n\n  private _getChildren = (node: FileNode) => { return observableOf(node.children); };\n\n  hasNestedChild = (_: number, nodeData: FileNode) => {return !(nodeData.type); };\n}\n\n","\nimport { LetterComponent } from './letter.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FormsModule }   from '@angular/forms';\nimport {\n  MatFormFieldModule,\n  MatAutocompleteModule,\n  MatBadgeModule,\n  MatBottomSheetModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatStepperModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatTreeModule,\n} from '@angular/material';\nconst routes: Routes = [\n  {\n      path     : '**',\n      component: LetterComponent,\n  }\n];\n@NgModule({\n  imports: [\n   CommonModule,\n    RouterModule.forChild(routes),\n    CdkTableModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n  ],\n  declarations: [LetterComponent]\n})\nexport class LetterModule { }\n"],"sourceRoot":""}